{
  "hash": "480b820b34c63650eb3c4e07aeb32869",
  "result": {
    "markdown": "---\ntitle: How LLMs Learn About the World\nauthor: Tom Cunningham, [Integrity Institute](https://integrityinstitute.org/)\ndate: today\nexecute:\n  echo: false\n  cache: true # caches chunk output\nfig-align: center\nreference-location: margin\nformat:\n   html:\n      toc: true\n      toc-depth: 2\n      toc-location: left\n      html-math-method:\n         method: mathjax\n         url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg-full.js\"\n         #     ^ this forces SVG instead of CHTML, otherwise xypic renders weird\n      include-in-header:\n         - text: |\n            <script>window.MathJax = {\n                     loader: { load: ['[custom]/xypic.js'],\n                                 paths: {custom: 'https://cdn.jsdelivr.net/gh/sonoisa/XyJax-v3@3.0.1/build/'}},\n                  tex: {packages: {'[+]': ['xypic']},\n                     macros: {\n                        bm: [\"\\\\boldsymbol{#1}\", 1],\n                        bmatrix: [\"\\\\begin{bmatrix}#1\\\\end{bmatrix}\", 1],\n                        smallmatrix: [\"\\\\begin{smallmatrix}#1\\\\end{smallmatrix}\", 1],\n                        ut: [\"\\\\underbrace{#1}_{\\\\text{#2}}\", 2],\n                        utt: [\"\\\\underbrace{#1}_{\\\\substack{\\\\text{#2}\\\\\\\\\\\\text{#3}}}\", 3]\n                     }}};\n            </script>\n#bibliography: social-media.bib\nbibliography: ai.bib\nengine: knitr\n#draft: true\n# editor:\n#    render-on-save: true\n---\n\n<style>\n    h1 {  border-bottom: 4px solid black; }\n    h2 {  border-bottom: 1px solid gray; padding-bottom: 0px; color: black; }\n    dl { margin-bottom: 0px; }\n    dt strong { font-weight: bold; }\n    dd { margin-left: 20px; }\n</style>\n<!-- https://tecunningham.github.io/posts/2023-08-22-ceiling-on-ai-performance-persuasion.html -->\n\n::: {.column-margin}\n   <!-- ![](images/2023-09-05-07-46-02.png) -->\n   ![](images/2023-09-05-19-11-49.png)\n:::\n<span style=\"background:yellow;\">==*Still a draft, don't circulate!*==</span>\n\n**I describe a simple model of LLMs, humans, and the world.** Large language models (LLMs) answer questions by predicting how a human would answer that question. This raises a lot of interesting issues about when LLMs would do better or worse than the humans that they're learning from. In this note I write down a simple model of how LLMs learn things, basically:\n      $$\\xymatrix@R=0cm@C=0.3cm{\n         *+[F:<5pt>]{\\text{world}} \\ar[rr]\n         && *+[F:<5pt>]{\\text{human}} \\ar[rr]\n         && *+[F:<5pt>]{\\text{LLM}}\\ar[r]\n         & \\\\\n         & \\txt{human\\\\learns\\\\about\\\\world}\n         && \\txt{LLM\\\\predicts\\\\human\\\\answers\\\\to questions}\n         && \\txt{LLM\\\\answers\\\\novel\\\\questions}\n      }$$\n   <!-- \\def\\objectstyle{\\scriptstyle}\\def\\textstyle{\\scriptstyle}\\def\\labelstyle{\\scriptstyle} -->\n\n**The model gives crisp implications about a broad range of issues.** Below I derive each implication formally, here I here give some intuitive arguments:\n\n::: {.cell .column-margin hash='2023-09-05-model-of-ai-imitation_cache/html/unnamed-chunk-1_d6ad6d12741bbfc1bf1e460905c0c9f0'}\n::: {.cell-output-display}\n![In general the questions answerable by an LLM will not be a subset of the questions answered in the training set, or even those answerable by the people who contributed to the training set.](2023-09-05-model-of-ai-imitation_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n   1. **An LLM trained on the output of a single human will generally do worse than that human.** This is because (1) the text they are trained on represents only a subset of the knowledge that human's knowledge; (2) the model fit will always be imperfect. However if the human's answers are inconsistent then the LLM can do better simply by being less noisy.\n   \n   2. **An LLM trained on the output of multiple humans can outperform any one of them.** People tend to answer only the questions that they know the answer to, so predicting the answer to a question will tend to predict the answer of an expert in that field. The set of LLM-answerable questions can be thought of as including, at a minimum, the union of the questions answered in the training data.\n   \n   3. **An LLM can answer questions no human can answer.** LLMs are not designed to explicitly make inferences about the world but the act of interpolating between observed answers will, in some circumstances, functionally operate as inference, and as a consequence the set of LLM-answerable questions can exceed the union of human-answerable questions. We already see this in LLM outputs: they can answer questions that no single human knows the answer to.\n\n   4. **An LLM can be used to extract tacit knowledge.** Much human knowledge is tacit, reflected in our lack of insight into the bases of our judgment. If an LLM can match human performance in answering questions then it will effectively make available the tacit knowledge used in those judgments, and so open up a range of capabilities much wider than any human can achieve. In practice this might mean querying an LLM repeatedly to map out tacit knowledge.\n\n**Real-World Implications.**\n\n   1. **LLMs bring everybody to the knowledge frontier.** An LLM can effectively serve as a consultant: it will tell you how a domain-expert would answer your question. For some problems we've already been able to do that for a long time, e.g. a textbook will tell you scientific advice on crop management practices, but LLMs allow for much subtler contingencies and to incorporate tacit knowledge. We should therefore expect the productivity impact of LLMs to be mainly on those who are behind the knowledge frontier, and we might also expect a compression of incomes.\n   <!-- 3. By pooling all the information in the training set LLMs allow everybody to have expert-level judgment on a given subject, and so give relatively bigger advantage to those with less knowledge. -->\n\n   2. **AI could be used to create super-human artefacts.** There has been a lot of discussion about whether AI be used to exceed human abilities to create certain artefacts, e.g. hyper-beautiful paintings, hyper-addictive clickbait, hyper-persuasive text. Using the existing architecture of AI this is unlikely: they might be able to predict the objects that a very talented human would produce, but would not surpass their ability. However AI could be used to generate artfeacts indirectly: instead of predicting how a human would create such an arfect, the weights that the AI has learned could be used to find the artefact which maximizes the function of interest, e.g. hyper-persuasive, or hyper-beautiful. In this way the AI could create artefacts beyond the ability of any human.^[This is roughly how image synthesis algorithms work: after training a model to recognize images, new images can be created by maximizing the learned weights.]\n\n\n#           Model Setup\n\n**The model has three steps.**\n\n   $$\\xymatrix@C=.5cm@R=0cm{\n      \\text{world}\n      && \\text{human}\n      && \\text{LLM}\\\\\n      *+[F:<5pt>]{\\bm{w}} \\ar[rr]^{\\bm{a}=Q\\bm{w}}\n      && *+[F:<5pt>]{\\hat{\\bm{w}}} \\ar[rr]^{\\hat{\\bm{a}}=\\hat{Q}\\hat{\\bm{w}}}\n      && *+[F:<5pt>]{\\bar{\\bm{w}}} \\ar[rr]^{\\tilde{a}=\\tilde{q}'\\bar{\\bm{w}}}\n      && \\  \\\\\n      \\txt{unobserved\\\\truth\\\\about\\\\the\\\\world}\n      & \\txt{answers\\\\to\\\\human\\\\questions}\n      & \\txt{beliefs\\\\formed\\\\by\\\\human}\n      & \\txt{text\\\\written\\\\by\\\\human}\n      & \\txt{LLM\\\\model\\\\of\\\\human\\\\text}\n      & \\txt{LLM's\\\\answers\\\\to\\\\new\\\\questions}\n   }$$\n\n**Questions and answers.** We will model everything as a set of questions and their answers. A question is defined by a set of binary attributes ($q_1,\\ldots,q_n\\in\\{-1,1\\}$), and the answer is a linear function of those attributes given some unobserved weights $w_1,\\ldots,w_n$:\n\n   $$\\begin{aligned}\n      \\ut{\\bmatrix{a^1 \\\\ \\vdots \\\\ a^m}}{answers}\n         = \\ut{\\bmatrix{q_1^1 w_1 + \\ldots q_n^1w_n \\\\ \\vdots \\\\ q_1^m w_1 + \\ldots q_n^mw_n}}{questions}\n   \\end{aligned}$$\n\n\n**Human beliefs.** After observing a set of question and their real-world answers the human will form beliefs about the weights $w_1,\\ldots,w_n$. We can explicitly write the human posteriors if we assume their priors are Gaussian and i.i.d. ($\\bm{w}\\sim N(0,\\sigma^2I)$):[^covariance]\n   $$\\begin{aligned}\n      \\bm{a}        &= Q\\bm{w}\n         && \\text{(questions \\& answers given true weights $\\bm{w}$)}\\\\\n      \\hat{\\bm{w}} &= Q'(QQ')^{-1}\\bm{a}\n         && \\text{(human estimate of true weights $\\bm{w}$)}\n   \\end{aligned}$$\n\n   I will assume that the number of unobserved weights is large relative to the human's experience ($n\\gg m$), so the human will gradually learn more about reality as she observes the answer to more questions, and will be able to perfectly answer any question she's seen before, but will never learn the full set of weights.\n\n   [^covariance]: I am assuming $\\bm{w}$ has zero-mean and is i.i.d. just to cut down on notation, the results all hold for the more general multivariate Normal case.\n\n**Computer beliefs.** Suppose that humans write down some set of question and answer them given their beleifs. We use that text to train a computer to predict the answer given any question, and the computer likewise assumes a linear model with i.i.d. Gaussian weights. Then we can explicitly write the computer-estimated weights:\n\n   $$\\begin{aligned}\n      \\hat{\\bm{a}}        &= \\hat{Q}\\hat{\\bm{w}}\n         && \\text{(human-generated questions \\& answers)}\\\\\n      \\bar{\\bm{w}} &= \\hat{Q}'(\\hat{Q}\\hat{Q}')^{-1}\\hat{\\bm{a}}\n         && \\text{(computer estimate of human weights $\\hat{\\bm{w}}$)}\n   \\end{aligned}$$\n\n**Computer answers.** Finally we can ask the computer a new question, $\\tilde{q}$, and observe its answer:\n   $$\\begin{aligned}\n      \\tilde{a}        &= \\tilde{\\bm{q}}'\\bar{\\bm{w}}\n         && \\text{(computer answer to a novel question $\\tilde{\\bm{q}}$)}\\\\\n   \\end{aligned}$$\n\n\n#           Model Implications\n\n**If one human records all their observations then the computer will perfectly imitate them.** \n:  Suppose that there is one human and they write down all of their observations, $\\hat{Q}=Q$. Then the computer's beliefs will be the same as the human's beliefs ($\\hat{\\bm{w}}=\\bar{\\bm{w}}$), and so the computer will answer every question exactly as the human does, though neither knows the truth ($\\bar{\\bm{w}}\\neq\\bm{w}$).\n\n**If humans do not record all their observation then the computer will perform worse.**\n:  Suppose humans only write down some of their observations, i.e. $\\hat{Q}$ is a row-wise subset of $Q$. Then computers and humans will give the same answers for any question in the training set, but outside of that set computers will generally do worse than humans. And so for every question $\\bm{q}$ the computer will do worse in expectation:\n   $$E[\\ut{(\\bm{q}\\bm{a}-\\bm{q}\\bar{\\bm{a}})^2}{computer error}]\\geq\n      E[\\ut{\\bm{q}(\\bm{a}-\\hat{\\bm{a}})}{human error}].$$\n\n**If there are multiple humans then the computer will outperform them both.**\n: Suppose there are two humans who each observe answers to different question, $Q_A$ and $Q_B$, and they both write them all down, so $\\bar{Q}=(\\smallmatrix{Q_A\\\\Q_B})$ and $\\bar{\\bm{a}}=(\\smallmatrix{Q_A\\bm{w}\\\\Q_B\\bm{w}})$. Now the computer clearly has superior information to either human, and so for both $i\\in\\{1,2\\}$ and every question $\\bm{q}$ we can write:\n      $$E[\\ut{(\\bm{q}\\bm{a}-\\bm{q}\\bar{\\bm{a}})^2}{computer error}]\\leq\n      E[\\ut{\\bm{q}(\\bm{a}-\\hat{\\bm{a}}_i)}{human error}].$$\n\n**If there are multiple humans then the computer can answer question no human can answer.** \n \n: Suppose two humans observe the answers to the following questions:\n   $$\\begin{aligned}\n      Q_A &= \\bmatrix{1 & 1 & 1 \\\\ 1 & -1 & 1} \\\\\n      Q_B &= \\bmatrix{1 & 1 & 1 \\\\ 1 & 1 & -1}\n   \\end{aligned}$$\n      The first human will learn the exact value of $w_2$, and the second human will learn the exact value of $w_3$, but neither will learn both, and so neither could perfectly predict the answer to this question:\n      $$\\begin{aligned}\n         \\tilde{q} &= \\bmatrix{1 & -1 & -1} \\\\\n      \\end{aligned}$$\n\n      However if they both recorded their observations, so the computer observes $\\bar{\\bm{a}}=(\\smallmatrix{Q_1\\bm{w}\\\\Q_2\\bm{w}})$, the computer will be able to infer both $w_2$ and $w_3$, and thus will be able to perfectly answer $\\tilde{q}$.\n\n      We can see this behaviour in LLMs: they sometimes combine a pair of facts or a pair of abilities which no single human has access to, e.g. when an LLM translates between two languages, for which there exists no human speaker of both.\n\n**If humans write outside their expertise then the computer will do worse.** \n\n:     In the cases above we assumed that the two humans recorded only what they directly observed. This means the computer essentially had a window directly to the world. However the humans could instead have written down their estimated answers to other questions. Suppose they both wrote down answers to every possible question, then the computer would learn the *average* of the two human's estimated weights:[^noise]\n   $$\\bar{\\bm{w}}=\\frac{1}{2}\\hat{\\bm{w}}_A+\\frac{1}{2}\\hat{\\bm{w}}_B.$$\n\n      Here the computer will do worse than the two humans on the original questions, $Q_A$ and $Q_B$.\n\n      The implication is that LLMs work so well only because people tend to write about what they know. Put another way, when an LLM answers a question, it will not predict the answer given by the average person, but will predict the answer given by people who are likely to answer that question in the real world, and luckily those people tend to be people who are subject-matter experts.\n\n   [^noise]: We would have to augment the computer's learning rule to allow for noise in answers - I need to confirm that the weighting will be exactly 1/2.\n\n\n**If humans have tacit knowledge, the computer model can outperform humans in creation of new artefacts.** \n\n: Suppose humans have tacit knowledge of the world, we can model this with two separate sets of beliefs:\n   $$\\begin{aligned}\n      \\hat{\\bm{w}}^T   &= \\text{tacit knowledge}\\\\\n      \\hat{\\bm{w}}^E &= \\text{explicit knowledge}\\\\\n   \\end{aligned}$$\n\n      When the human encounters a new question $\\tilde{\\bm{q}}$ they will use their tacit knowledge to form an estimate of the answer, $\\hat{a}=\\tilde{\\bm{q}}'\\hat{\\bm{w}}^T$. For simplicity assume tacit knowledge is perfectly accurate $\\hat{\\bm{w}}^T=\\bm{w}$, and explicit knowledge is imperfect.\n   \n      The distinction becomes important when we want to create a new question. Here it's useful to interpret $\\bm{q}$ not as a question but as an artefact, e.g. text or image, and $\\bm{a}=\\bm{q}'\\bm{w}$ represents some abstract property, e.g. how beautiful or how rhythmic. Suppose we want to chosose $\\bm{q}\\in\\{-1,1\\}^n$ to maximize $\\bm{w}\\bm{q}$. If we had perfect access to our beliefs $\\bm{w}^T$ this would be simple, however if we have access only to imperfect explicit knowledge $\\hat{\\bm{w}}^E$, the artefact which maximizes that function will not generally be the one which maximizes $a$.\n\n      Here the computer model is less constrained. Suppose the computer has observed sufficiently many questions until they have perfectly learned the tacit knowledge, $\\bar{\\bm{w}}=\\hat{\\bm{w}}^T$. Then if computation is free the computer could be used to query every single $\\bm{q}\\in\\{-1,1\\}^n$ to find the best possible artefact.\n\n\n\n\n#           Derivation\n\n$$\\begin{aligned}\n   Q &= \\bmatrix{q_1^1 & \\ldots & q^1_n \\\\ & \\ddots \\\\ q^m_1 & \\ldots & q^m_n}\n      && \\text{(set of questions)} \\\\\n   w'  &= \\bmatrix{w_1 \\ldots w_n} \\\\\n   a    &= \\bmatrix{a^1 \\\\ \\vdots \\\\ a^m} \n      = \\bmatrix{q_1^1 w_1 + \\ldots q_n^1w_n \\\\ \\vdots \\\\ q_1^m w_1 + \\ldots q_n^mw_n} \\\\\n\\end{aligned}$$\n\n   $$\\begin{aligned}\n      \\bm{w} &\\sim N(0,\\Sigma) \n         && (n\\times 1\\text{ vector of parameters of the world)}\\\\\n      Q      &\\in \\{-1,1\\}^{n\\times m}\n         && \\text{($m$ questions, each has $n$ binary parameters)}\\\\\n      \\ut{\\bm{a}}{$m\\times1$}   &= \\ut{Q}{$m\\times n$}\\ut{\\bm{w}}{$n\\times1$}\n         && \\text{(answers provided by the world)}\\\\\n      \\hat{\\bm{w}} &= E[\\bm{w}|Q,\\bm{a}]\n            && \\text{(human beliefs about the world)}\\\\\n         &= \\ut{\\Sigma Q'}{$Cov(\\bm{w},\\bm{a})$}\n            (\\ut{Q\\Sigma Q'}{$Var(\\bm{a})$})^{-1}\n            \\bm{a}\n   \\end{aligned}$$\n\n**With one observation and two weights.** Suppose $m=1, n=1$, then we have:\n   $$\\begin{aligned}\n      Q  &= \\bmatrix{q_1 & q_2} \\\\\n      \\bm{a}'  &= \\bmatrix{a} \\\\\n      \\bm{w}'  &= \\bmatrix{w_1 & w_2 } \\\\\n      \\Sigma &= \\bmatrix{\\sigma_1^2 & \\rho \\\\ \\rho & \\sigma_2^2}\\\\\n      \\Sigma Q' &= \\bmatrix{ \\sigma_1^2q_1 + \\rho q_2 \\\\ \\rho q_1 + \\sigma_2^2 q_2 } \\\\\n      Q\\Sigma Q' &= \\bmatrix{ \\sigma_1^2q_1^2 + 2\\rho q_1q_2 + \\sigma_2^2 q_2^2} \\\\\n      \\hat{\\bm{w}}=\\Sigma Q'(Q\\Sigma Q')^{-1}\\bm{a}\n         &= \\bmatrix{ \\frac{\\sigma_1^2q_1 + \\rho q_2}{\\sigma_1^2q_1^2 + 2\\rho q_1q_2 + \\sigma_2^2 q_2^2} \\\\ \n                  \\frac{\\rho q_1 + \\sigma_2^2 q_2}{\\sigma_1^2q_1^2 + 2\\rho q_1q_2 + \\sigma_2^2 q_2^2}} a\n   \\end{aligned}\n   $$\n\nWe can normalize $q_1=q_2=1$, then we have\n   $$\\hat{w}_1 = \\frac{\\sigma_1^2+\\rho}{\\sigma_1^2+2\\rho+\\sigma_2^2}a,$$\n\n   This means we are dividing up responsibility for the answer ($a$) into the contributions of each component, nice and simple.\n\n**With two observations and one weight.** Here we're *over-identified*. \n   $$\\begin{aligned}\n      Q  &= \\bmatrix{q^1 \\\\ q^2} \\\\\n      \\bm{a}  &= \\bmatrix{a^1 \\\\ a^2} \\\\\n      \\bm{w}  &= \\bmatrix{w } \\\\\n      \\Sigma &= \\bmatrix{\\sigma^2 }\\\\\n      \\Sigma Q' &= \\bmatrix{ \\sigma^2 q^1 & \\sigma^2 q^2 } \\\\\n      Q\\Sigma Q' &= \\bmatrix{ \\sigma^2 q^1q^1 & \\sigma^2q^1q^2 \\\\ \\sigma^2q^1q^2 & \\sigma^2q^2q^2}\n         && \\text{(this matrix doesn't have an inverse)}\n   \\end{aligned}\n   $$\n\n**With noise.** Suppose we only observe the answers with random noise, then we get this:\n$$\\begin{aligned}\n   \\ut{\\bm{a}}{$m\\times1$}   &= \\ut{Q}{$m\\times n$}\\ut{\\bm{w}}{$n\\times1$}\n      + \\ut{\\bm{e}}{$n\\times 1$} \\\\\n   \\bm{e} &\\sim N(\\bm{0},s^2I_m) && \\text{(i.i.d. noise w variance $s^2$)}\\\\\n   Cov(\\bm{w},\\bm{a})   &= \\Sigma Q' \\\\\n   Var(\\bm{a}) &= Q\\Sigma Q' + s^2I_m \\\\\n   E[\\bm{w}|Q,\\bm{q}]   &= \\Sigma Q'(Q\\Sigma Q' + s^2I_m)^{-1}\\bm{a}\n\\end{aligned}$$\n\n**Puzzle: is this a different answer from Gaussian regression?** The Gaussian regression answer to this would be:\n\n   $$\\begin{aligned}\n      \\hat{w}  &= (Q'Q+\\Sigma)^{-1}Q'\\bm{a},\n         &&  \\text{(assume $\\bm{w}\\sim N(0,\\Sigma)$)}\n   \\end{aligned}$$\n\n   It seems like the two solution should be the same. Why not?\n\n**Compare to Bayesian linear regression.**  We can compare this result to Bayesian linear regression (e.g. [Wikipedia](https://en.wikipedia.org/wiki/Bayesian_linear_regression)):\n   $$\\begin{aligned}\n      \\bar{\\beta}  &= \\Sigma Q'(Q\\Sigma Q' + s^2I_m)^{-1}\\bm{a}\n         && \\text{(our result)} \\\\\n      \\tilde{\\beta} &= (Q'Q+s^{2}\\Sigma^{-1})^{-1}Q'\\bm{a}\n         && \\text{(Bayesian linear regression)}\\\\\n   \\end{aligned}$$\n\n   I *believe* that these can be shown to be equivalent by the [matrix inversion lemma](https://en.wikipedia.org/wiki/Woodbury_matrix_identity), though I haven't confirmed this. There's a [note online](https://digitalcommons.usu.edu/cgi/viewcontent.cgi?article=1212&context=ece_facpub) that appears to show equivalence.\n\n   Getting from first to second: premultiply by $\\Sigma$\n\n**Original notation.**  From [Wikipedia](https://en.wikipedia.org/wiki/Bayesian_linear_regression):\n  $$\\begin{aligned}\n      y &= X\\beta + \\varepsilon \\\\\n      \\beta &\\sim N(\\mu_0,\\sigma^2\\Lambda_0^{-1})\\\\\n      \\varepsilon &\\sim  N(0,\\sigma^2I_m) \\\\\n      \\tilde{\\beta}= E[\\beta|y,X] &= (X'X+\\Lambda_0)^{-1}(X'X\\hat{\\beta}+\\Lambda_0\\mu_0)\\\\\n         &= (X'X+\\Lambda_0)^{-1}(X'y+\\Lambda_0\\mu_0)\\\\\n  \\end{aligned}$$\n\n  Follows:\n\n  - If prior precision low ($\\Lambda_0\\approx 0$) then will be roughly equal to OLS result: $\\tilde{\\beta}\\approx\\hat{\\beta}$.\n  - If prior precision is high ($\\Lambda_0\\gg 0$) then will be shrunk to prior, $\\tilde{\\beta}\\approx \\mu_0$.\n  - If one observation and two weights ($m=1,n=2$), with $x^1_1=x^1_2=1$, then we'll have:\n    $$\\begin{aligned}\n      \\tilde{\\beta}&= (\\bmatrix{1 & 1\\\\1 &1}+\\bmatrix{\\sigma_1^2 & \\rho \\\\\n         \\rho & \\sigma_2^2})^{-1}\\bmatrix{y\\\\y} \\\\\n            &= \\bmatrix{1+\\sigma_1^2 & 1+\\rho \\\\\n                     1 + \\rho & 1 + \\sigma_2^2}^{-1} \\bmatrix{y\\\\y} \\\\\n            &= \\frac{1}{(1+\\sigma_1^2)(1+\\sigma_2^2)-2(1+\\rho)^2}\\bmatrix{1+\\sigma_1^2 & -(1+\\rho) \\\\\n                     -(1 + \\rho) & 1 + \\sigma_2^2} \\bmatrix{y\\\\y} \\\\\n            &= \\frac{\\sigma_1^2-\\rho}{(1+\\sigma_1^2)(1+\\sigma_2^2)-2(1+\\rho)^2}\n      \\end{aligned}$$\n  - Puzzle: why doesn't the result depend on variance of noise, $\\sigma^2$?\n\n\n#     Notes / Offcuts\n\n**The LLM is accurate only because humans are accurate.** The LLM is predicting human answers to questions, thus the LLM's answers will be typically correct only because human answers are typically correct. If we trained the LLM on text produced by a human who was profoundly wrong about the world then the LLM would be equally wrong.\n\n**Model fit.** As long as the training data is generated linearly then the LLM will fit all the training data. When $\\hat{m}>n$ then the model will always fit the training data perfectly as long as the dataset doesn't contain multiple different answers to the same question.\n\n**Extension: quadratic forms.** Instead of answers being linear in question-features ($a=q'w$) we could suppose they're quadratic, $a=q'Wa$, with $W$ a matrix having dimension $n^2$. I'm not sure whether we could still get an analytic solution for posteriors. <!--Can visualize the matrix W and setting each bit in t will add an \"L\" overlaid on the matrix (alternatively: a row and column), and will sum the cells where row & column both are activated.-->\n\n**Extension: binary answers.** In some cases it is natural to think of the answer, $a$, as binary instead of continuous. We might be able to reinterpret the model with $a$ representing the log-odds ratio of a binary outcome. Alternatively there might be a way of having a beta-binomial conjugate prior over the probability of $a$.\n\n**Extension: endogenous weights.** In many practical cases the weights $w$ will change, e.g. if $w$ represents the marginal . Extension: weights change with change in production, i.e. communication model. \n\n**Can visualize the surface extrapolating from a single case.** Can compare surface from (1) tacit knowledge; (2) explicit knowledge; (3) extrapolation from local knowledge.\n\n**Q: term for imitative learning in AI?** Plagiaristic? Tyna Elondou mentioned it.\n\n**Yann LeCunn and connection.** LeCunn often talks about how LLMs will not lead to general artificial intelligence because they are not *grounded* in the world, only in human production. However human experience of the world is very indirect: we infer objects by triangulating light rays bounced off them, & combining a lot of different sources. In addition our pre-conscious brain does a ton of processing before we get hold of it.\n\n   $$\\xymatrix{\n      *+[F:<5pt>]{\\text{world}} \\ar[r]\\ar[dr]\n      & *+[F:<5pt>]{\\text{human}_1} \\ar[r]\n      & *+[F:<5pt>]{\\text{text}_1} \\ar[r]\n      & *+[F:<5pt>]{\\text{LLM}}\\\\\n      & *+[F:<5pt>]{\\text{human}_2} \\ar[r]\n      & *+[F:<5pt>]{\\text{text}_2} \\ar[ur]\n   }$$\n\n**LLM will look like it's making inferences about the world, but it's just making inferences about humans' inferences about the world.**\n\n**How can LLMs learn about the world?** LLMs answer questions by predicting how a human would answer that question, after training on an enormous corpus of human-generated text. Despite only knowing about the world at second hand LLMs do amazingly well, sometimes even answering questions that no human could have answered.\n\n**The basic logic: (1) humans interpolate the world; (2) LLMs interpolate humans.** Humans observe a few.\n\n**Question: separability of conditional expectation?** What must be true about $f(y,x,z)$ for it to be the case that $E[y|x,z]$ is separable in $x$ and $z$? Perhaps conditional independence?\n\n\n   <!-- 1. What types of questions will LLMs do badly on?\n   1. When will an LLM do better than a human?\n   2. When will an LLM's answer be sensitive to the wording of the question?\n   3. When will an LLM be able to combine knowledge held by different humans?\n   4. When will repeatedly querying an LLM yield additional knowledge?\n   5. Can an LLM distinguish between truth and uncertainty? (e.g. for detecting hallucinations) -->\n\n**About prompt engineering:** when you change your prompt, it effectively changes the person who's answering your question.\n\n**Generating new training data:** In some cases feeding on your own AI-generated outputs could improve the model.\n\n\n<!-- **First stage:** humans ask the world questions ($Q$), get answers ($\\bm{a}$), and update on weights ($\\bm{w}$):\n\n   $$\\begin{aligned}\n      \\bm{w} &\\sim N(0,\\Sigma) \n         && (n\\times 1\\text{ vector of parameters of the world)}\\\\\n      Q      &\\in \\{-1,1\\}^{n\\times m}\n         && \\text{($m$ questions, each has $n$ binary parameters)}\\\\\n      \\ut{\\bm{a}}{$m\\times1$}   &= \\ut{Q}{$m\\times n$}\\ut{\\bm{w}}{$n\\times1$}\n         && \\text{(answers provided by the world)}\\\\\n      \\hat{\\bm{w}} &= E[\\bm{w}|Q,\\bm{a}]\n            && \\text{(human beliefs about the world)}\\\\\n         &= \\ut{\\Sigma Q'}{$Cov(\\bm{w},\\bm{a})$}\n            (\\ut{Q\\Sigma Q'}{$Var(\\bm{a})$})^{-1}\n            \\ut{Q\\bm{w}}{$\\bm{a}$}\n   \\end{aligned}$$\n\n**Second stage:** humans write down answers to questions ($\\hat{Q},\\hat{\\bm{a}}$), and LLMs learn to predict those answers. Note that the LLM is doing a pure prediction problem: there's no sense in which .\n   $$\\begin{aligned}\n      \\hat{\\bm{w}}   &\\sim N(0,\\hat{\\Sigma})\n         && \\text{(LLM's priors about human weights)} \\\\\n      \\hat{Q}      &\\in \\{-1,1\\}^{n\\times \\hat{m}}\n         && \\text{(questions answered by human)}\\\\\n      \\hat{\\bm{a}}   &= \\hat{Q}\\hat{\\bm{w}}\n         && \\text{(human answers to questions)} \\\\\n      \\bar{w}  &= E[\\hat{\\bm{w}}|\\hat{Q},\\hat{\\bm{a}}]\n         && \\text{LLM estimates of weights $\\bar{w}$}\\\\\n         &= \\ut{\\hat{\\Sigma}\\hat{Q}'}{$Cov(\\hat{\\bm{w}},\\hat{\\bm{a}})$}\n            (\\ut{\\hat{Q}\\hat{\\Sigma}\\hat{Q}'}{$Var(\\hat{\\bm{a}})$})^{-1}\n            \\ut{\\hat{Q}\\hat{\\bm{w}}}{$\\hat{\\bm{a}}$}\n   \\end{aligned}$$\n\n**Third stage:** We ask the LLM a single question $\\tilde{\\bm{q}}$, get answer $\\tilde{a}$:\n\n   $$\\begin{aligned}\n      \\tilde{a}   &= \\bar{\\bm{w}}\\tilde{\\bm{q}}.\n   \\end{aligned}$$ -->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}